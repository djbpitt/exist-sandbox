xquery version "3.1";

(:~ This library module contains XQSuite tests for the exist-sandbox app.
 :
 : @author djb
 : @version 1.0.0
 : @see http://www.obdurodon.org
 :)

(:declare namespaces:)
(:  tests: is the namespace for this module. 
    Using a different namespace for tests allows us to define test function names and variables to mirror our existing function names. 
    We can only run multiple tests of the same function if the input is atomic.:)
module namespace tests = "http://www.obdurodon.org/apps/exist-sandbox/tests";
(:  imports the functions we are testing    :)
import module namespace djb="http://www.obdurodon.org" at "../../modules/functions.xqm";
(:  automatic namespace generated by Yeoman, don't try to change    :)
declare namespace test="http://exist-db.org/xquery/xqsuite";

(:declare variables:)
declare variable $tests:XML := document {
    <TEI xmlns="http://www.tei-c.org/ns/1.0">
        <text>
            <titleStmt>
                <title>My title</title>
                <respStmt><name>David</name></respStmt>
                <publicationStmt>
                    <date>2022-02-22</date>
                </publicationStmt>
            </titleStmt>
        </text>
    </TEI>
};

(: %test:setUp will run the function after it, function names are arbitrary:)
declare
    %test:setUp
function tests:_test-set() {    
    xmldb:store("/db/apps/exist-sandbox", "test.xml", $tests:XML)
};

(: %test:tearDown will run after module testing is done, function names are arbitrary:)
declare
    %test:tearDown
function tests:_test-teardown() {
    xmldb:remove("/db/apps/exist-sandbox", "test.xml")
};

(:begin module testing:)

(:test declares input as number 10, expects function to output 100:)
declare
    %test:arg("input", 10)
    %test:assertEquals(100)
    function tests:square-10($input as xs:integer) as xs:double {
        djb:square($input)
    };

(:test declares input as number 11, expects function to output 121:)
declare
    %test:arg("input", 11)
    %test:assertEquals(121) 
    function tests:square-11($input as xs:integer) as xs:double {
        djb:square($input)
    };

(:declares input as document created by %test:setUp:)
declare
        (:test expects one sequence of three items:)
    %test:assertXPath("count($result) eq 3")
        (:first result has local name of title:)
    %test:assertXPath("$result[1] ! local-name(.) eq 'title'")
        (:first result has TEI namespace. these two tests evaluate the element type, namespace and localname:)
    %test:assertXPath("$result[1] ! namespace-uri(.) eq 'http://www.tei-c.org/ns/1.0'")
        (:first result has string value 'My title':)
    %test:assertXPath("$result[1] eq 'My title'")
        (:second result has local name of name:)
    %test:assertXPath("$result[2] ! local-name(.) eq 'name'")
        (:second result has TEI namespace:)
    %test:assertXPath("$result[2] ! namespace-uri(.) eq 'http://www.tei-c.org/ns/1.0'")
        (:second result has string value 'David':)
    %test:assertXPath("$result[2] eq 'David'")
        (:third result has local name of date:)
    %test:assertXPath("$result[3] ! local-name(.) eq 'date'")
        (:third result has TEI namespace:)
    %test:assertXPath("$result[3] ! namespace-uri(.) eq 'http://www.tei-c.org/ns/1.0'")
        (:third result has string value '2022-02-22':)
    %test:assertXPath("$result[3] eq '2022-02-22'")
        (:declares input as newly created and stored test.xml and returns the output of the function we wish to test:)
    function tests:pub-info() as element()+ {
        let $input as document-node() := doc("/db/apps/exist-sandbox/test.xml")
        return djb:pub-info($input)
    };
